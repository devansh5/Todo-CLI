#!/usr/bin/env node

const commands=['new','get','complete','delete','update','help']

const chalk=require('chalk')
const args=process.argv
//...
const rl = require('readline');

const low = require('lowdb')
const FileSync = require('lowdb/adapters/FileSync')

const adapter = new FileSync('db.json')
const db = low(adapter)

// Set some defaults (required if your JSON file is empty)
db.defaults({ todos: []}).write()
//...
const usage=function(){
    const usageText=`
    todo helps you manage you todo tasks

    usage:
        todo <command>

        commands can be:

        new:    used to create a new todo
        get:    used to retrieve your todos
        delete: used to delete the todos
        update: used to update the todos
        complete:used to mark as complete
        help:   used to print te usage guide
    
    `
    console.log(usageText)
}


// used to log error to the console in red color

// prompt the input to enter the data
function prompt(question){
    const r=rl.createInterface({
        input:process.stdin,
        output:process.stdout,
        terminal:false
    });
    return new Promise((resolve,error)=>{
        r.question(question,answer=>{
            r.close()
            resolve(answer)
        });
    })
}

function newTodo(){
    const q=chalk.blue('type in your todo\n')
    prompt(q).then(todo=>{
        console.log(todo)
        db.get('todos')
          .push({
              title:todo,
              complete:false
          })
          .write()
    })
}

function getTodos(){
    const todos=db.get('todos').value()
    let index=1;
    todos.forEach(todo=>{
        let todoText=`[${index++}] ${todo.title} `
        if (todo.complete){
            todoText +=chalk.black.bgYellow('complete') 
        }
        console.log(chalk.green(todoText))
    })
    return
}
// delete todo
function deleteTodo(){
    if(args.length != 4){
        errorLog("invlaid number of arguments passed for delete command")
        return
    }
    let n =Number(args[3])

    if(isNaN(n)){
        errorLog('Please provide a valid number for delete command')
        return 
    }

    let todosLength=db.get('todos').value().length
    
    let todosarray=db.get('todos').value()

    if(n>todosLength){
        errorLog('invalid number passed for delete command')
        return
    }
    let value=todosarray[n-1]
    todosarray=todosarray.filter(function(item){
        return item!==value
    })
    db.set('todos',todosarray)
      .write()   
}


// complete todo 
function completeTodo(){
    if(args.length != 4){
        errorLog("invlaid number of arguments passed for complete command")
        return
    }
    let n =Number(args[3])

    if(isNaN(n)){
        errorLog('Please provide a valid number for complete command')
        return 
    }

    let todosLength=db.get('todos').value().length

    if(n>todosLength){
        errorLog('invalid number passed for complete command')
        return
    }

    db.set(`todos[${n-1}].complete`,true).write()
}

function errorLog(error){
    const eLog=chalk.red(error)
    console.log(eLog)
}

if (args.length> 3 && args[2]!='complete' && args[2]!='delete'){
    errorLog(`only argument can be accepted`)
    usage()
}

if(commands.indexOf(args[2])==-1){
    errorLog('invalid command passed')
    usage()
}

switch(args[2]){
    case 'help':
        usage()
        break
    case 'new':
        newTodo()
        break
    case 'get':
        getTodos()
        break
    case 'complete':
        completeTodo()
        break
    case 'delete':
        deleteTodo()
        break
    default:
        errorLog('invalid command passed')
        usage()
}